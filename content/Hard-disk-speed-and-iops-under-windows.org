#+TITLE: windows计算磁盘速率和iops
#+DATE: 2015-02-14
#+TAGS[]: Programing
#+OPTIONS: ^:nil

#+NAME: windows-iops
[[/assets/images/windows-iops.jpeg]]

windows上获取磁盘的信息有多种方式

1. 使用wmi接口获取

2. fsutil工具

3. 代码级调用windows api获取磁盘性能信息

准确性来看，调用windows api当然是最精确的了。

下面使用windows的ioctl来获取硬盘相关结构数据举个栗子。

DeviceIoControl相关例子参照: [[https://msdn.microsoft.com/en-us/library/windows/desktop/aa363216(v=vs.85).aspx][DeviceIoControl]]

硬盘的ioctl 控制码可以在msdn上找到说明: [[https://msdn.microsoft.com/en-us/library/windows/desktop/aa365183(v=vs.85)][IOCTL_DISK_PERFORMANCE]]

通过调用DeviceIoControl传参控制码得到结构数据DISK_PERFORMANCE: [[https://msdn.microsoft.com/en-us/library/windows/desktop/aa363991(v=vs.85).aspx][DISK_PERFORMANCE]]

#+begin_src c
#include <windows.h>
#include <winioctl.h>
#include <stdio.h>

#define wszDrive L"\\\\.\\PhysicalDrive0"

BOOL GetDiskPerformance(LPWSTR wszPath, DISK_PERFORMANCE *pdg)
{
  HANDLE hDevice = INVALID_HANDLE_VALUE;  // handle to the drive to be examined
  BOOL bResult   = FALSE;                 // results flag
  DWORD junk     = 0;                     // discard results

  hDevice = CreateFileW(wszPath,          // drive to open
                        0,                // no access to the drive
                        FILE_SHARE_READ | // share mode
                        FILE_SHARE_WRITE,
                        NULL,             // default security attributes
                        OPEN_EXISTING,    // disposition
                        0,                // file attributes
                        NULL);            // do not copy file attributes

  if (hDevice == INVALID_HANDLE_VALUE)    // cannot open the drive
  {
    return (FALSE);
  }

  bResult = DeviceIoControl(hDevice,                       // device to be queried
                            IOCTL_DISK_PERFORMANCE,        // operation to perform
                            NULL, 0,                       // no input buffer
                            pdg, sizeof(*pdg),             // output buffer
                            &junk,                         // # bytes returned
                            (LPOVERLAPPED) NULL);          // synchronous I/O

  CloseHandle(hDevice);

  return (bResult);
}

int main(int argc, char *argv[])
{
  DISK_PERFORMANCE ddg = {0}; //disk performance statistics
  BOOL aResult = FALSE;
  aResult = GetDiskPerformance(wszDrive, &ddg);
  if (aResult)
  {
	wprintf (L"BytesRead     = %I64d\n", ddg.BytesRead);
	wprintf (L"BytesWritten  = %I64d\n", ddg.BytesWritten);
	wprintf (L"ReadCount     = %I64d\n", ddg.ReadCount);
	wprintf (L"WriteCount    = %I64d\n", ddg.WriteCount);
  }
  else
  {
    wprintf (L"GetDiskPerformance failed. Error %ld.\n", GetLastError ());
  }
  return 0;
}
#+end_src

如果使用mingw编译的话，有可能mingw版本DISK_PERFORMANCE结构体不兼容，导致 DeviceIoControl调用时出错。
解决的办法可以自定义个DISK_PERFORMANCE_WIN_32，然后使用 mingw编译即可。

#+begin_src c
typedef struct _DISK_PERFORMANCE_WIN_32 {
       LARGE_INTEGER BytesRead;
       LARGE_INTEGER BytesWritten;
       LARGE_INTEGER ReadTime;
       LARGE_INTEGER WriteTime;
       LARGE_INTEGER IdleTime;
       DWORD         ReadCount;
       DWORD         WriteCount;
       DWORD         QueueDepth;
       DWORD         SplitCount;
       LARGE_INTEGER QueryTime;
       DWORD         StorageDeviceNumber;
       WCHAR         StorageManagerName[8];
} DISK_PERFORMANCE_WIN_32;
#+end_src

通过得到结构体数据就可以用来计算磁盘速率和iops了。

disk_rate = (ddg.BytesRead - pre_BytesRead) / Time_interval

iops = (ddg.ReadCount - pre_ReadCount) / Time_interval

