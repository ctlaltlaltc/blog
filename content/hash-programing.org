#+TITLE: 哈希表
#+DATE: 2015-05-19
#+TAGS[]: programing
#+OPTIONS: ^:nil

散列表（Hash table，也叫哈希表），是根据关键字（Key value）来直接访问在内存存储位置的 数据结构。也就是说，它通过计算一个关于键值的函数，将所需查询的数据映射到表中一个位置来访问 记录，这加快了查找速度。这个映射函数称做散列函数，存放记录的数组称做散列表。

散列函数

- 使用整型数作为key的散列函数

  参考: http://stackoverflow.com/a/12996028

  #+begin_src c
    static inline long int hashInt(long int x)
    {
	    x = ((x >> 16) ^ x) * 0x45d9f3b;
	    x = ((x >> 16) ^ x) * 0x45d9f3b;
	    x = ((x >> 16) ^ x);
	    return x;
    }
  #+end_src

- 使用字符串作为key的散列函数

  参考: http://www.cse.yorku.ca/~oz/hash.html

  #+begin_src c
    static inline long int hashString(char * str)
    {
	    unsigned long hash = 5381;
	    int c;

	    while (c = *str++)
		    hash = ((hash << 5) + hash) + c; /* hash * 33 + c */
	    return hash;
    }
  #+end_src
  
实际的工程问题，哈希还有其它术语，如构造散列函数、处理碰撞等，具体可参考: [[http://zh.wikipedia.org/wiki/%E5%93%88%E5%B8%8C%E8%A1%A8][哈希表]]

更为高级的哈希使用场景，可阅读linux内核相关的哈希表应用。

* 使用字符串作为key的散列函数来实现哈希表数据结构

哈希表的实现关键是是，选择合适的构造散列函数、构造散列表。

- 散列函数

  使用上面所提到的 ~使用字符串作为key的散列函数~

- 散列表

  #+begin_src c
    struct HashEntry
    {
	    char *key;
	    void  *value;
	    HashEntry *next;
    };

    struct HashTable
    {
	    HashEntry **bucket; // pointer to array of buckets
	    size_t buckets;
    };
  #+end_src
 
  几个接口实现:

  #+begin_src c
    HashTable *create_hash( size_t buckets )
    int add_ptr_by_str( HashTable *table, char *key, void *ptr )
    void* get_ptr_by_str( HashTable *table, char *key )
    int del_by_str( HashTable *table, char *key )
    int delete_hash( HashTable *table )
  #+end_src

简单的哈希实现源码: [[https://gist.github.com/9723/16d0c1c65d8d3503ec17][hash.c]]

github上一个完整的hash table实现，同时实现长整型和字符串作为key,支持多线程，详细学习可 参考: https://github.com/watmough/jwHash

